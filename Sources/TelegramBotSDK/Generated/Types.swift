// This file is automatically generated by Rapier

import Foundation

public struct InlineQueryResultGame: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var gameShortName: String {
        get { return internalJson["game_short_name"].stringValue }
        set { internalJson["game_short_name"].stringValue = newValue }
    }

    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var replyMarkup: InlineKeyboardMarkup? {
        get {
            let value = internalJson["reply_markup"]
            return value.isNullOrUnknown ? nil : InlineKeyboardMarkup(internalJson: value)
        }
        set {
            internalJson["reply_markup"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct Contact: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var firstName: String {
        get { return internalJson["first_name"].stringValue }
        set { internalJson["first_name"].stringValue = newValue }
    }

    public var lastName: String? {
        get { return internalJson["last_name"].string }
        set { internalJson["last_name"].string = newValue }
    }

    public var phoneNumber: String {
        get { return internalJson["phone_number"].stringValue }
        set { internalJson["phone_number"].stringValue = newValue }
    }

    public var userId: Int64? {
        get { return internalJson["user_id"].int64 }
        set { internalJson["user_id"].int64 = newValue }
    }

    public var vcard: String? {
        get { return internalJson["vcard"].string }
        set { internalJson["vcard"].string = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InputContactMessageContent: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var firstName: String {
        get { return internalJson["first_name"].stringValue }
        set { internalJson["first_name"].stringValue = newValue }
    }

    public var lastName: String? {
        get { return internalJson["last_name"].string }
        set { internalJson["last_name"].string = newValue }
    }

    public var phoneNumber: String {
        get { return internalJson["phone_number"].stringValue }
        set { internalJson["phone_number"].stringValue = newValue }
    }

    public var vcard: String? {
        get { return internalJson["vcard"].string }
        set { internalJson["vcard"].string = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct OrderInfo: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var email: String? {
        get { return internalJson["email"].string }
        set { internalJson["email"].string = newValue }
    }

    public var name: String? {
        get { return internalJson["name"].string }
        set { internalJson["name"].string = newValue }
    }

    public var phoneNumber: String? {
        get { return internalJson["phone_number"].string }
        set { internalJson["phone_number"].string = newValue }
    }

    public var shippingAddress: ShippingAddress? {
        get {
            let value = internalJson["shipping_address"]
            return value.isNullOrUnknown ? nil : ShippingAddress(internalJson: value)
        }
        set {
            internalJson["shipping_address"] = newValue?.internalJson ?? JSON.null
        }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct VideoNote: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var duration: Int {
        get { return internalJson["duration"].intValue }
        set { internalJson["duration"].intValue = newValue }
    }

    public var fileId: Int {
        get { return internalJson["file_id"].intValue }
        set { internalJson["file_id"].intValue = newValue }
    }

    public var fileSize: Int? {
        get { return internalJson["file_size"].int }
        set { internalJson["file_size"].int = newValue }
    }

    public var length: Int {
        get { return internalJson["length"].intValue }
        set { internalJson["length"].intValue = newValue }
    }

    public var thumb: PhotoSize? {
        get {
            let value = internalJson["thumb"]
            return value.isNullOrUnknown ? nil : PhotoSize(internalJson: value)
        }
        set {
            internalJson["thumb"] = newValue?.internalJson ?? JSON.null
        }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InlineKeyboardMarkup: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var inlineKeyboard: [[InlineKeyboardButton]] {
        get { return internalJson["inline_keyboard"].twoDArrayValue() }
        set {
            var rowsJson = [JSON]()
            rowsJson.reserveCapacity(newValue.count)
            for row in newValue {
                var colsJson = [JSON]()
                colsJson.reserveCapacity(row.count)
                for col in row {
                    let json = col.internalJson
                    colsJson.append(json)
                }
                rowsJson.append(JSON(colsJson))
            }
            internalJson["inline_keyboard"] = JSON(rowsJson)
        }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct Audio: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var duration: Int {
        get { return internalJson["duration"].intValue }
        set { internalJson["duration"].intValue = newValue }
    }

    public var fileId: Int {
        get { return internalJson["file_id"].intValue }
        set { internalJson["file_id"].intValue = newValue }
    }

    public var fileSize: Int? {
        get { return internalJson["file_size"].int }
        set { internalJson["file_size"].int = newValue }
    }

    public var mimeType: String? {
        get { return internalJson["mime_type"].string }
        set { internalJson["mime_type"].string = newValue }
    }

    public var performer: String? {
        get { return internalJson["performer"].string }
        set { internalJson["performer"].string = newValue }
    }

    public var thumb: PhotoSize? {
        get {
            let value = internalJson["thumb"]
            return value.isNullOrUnknown ? nil : PhotoSize(internalJson: value)
        }
        set {
            internalJson["thumb"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var title: String? {
        get { return internalJson["title"].string }
        set { internalJson["title"].string = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct MaskPosition: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var point: String {
        get { return internalJson["point"].stringValue }
        set { internalJson["point"].stringValue = newValue }
    }

    public var scale: Float {
        get { return internalJson["scale"].floatValue }
        set { internalJson["scale"].floatValue = newValue }
    }

    public var xShift: Float {
        get { return internalJson["x_shift"].floatValue }
        set { internalJson["x_shift"].floatValue = newValue }
    }

    public var yShift: Float {
        get { return internalJson["y_shift"].floatValue }
        set { internalJson["y_shift"].floatValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InlineQueryResultCachedGif: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var caption: String? {
        get { return internalJson["caption"].string }
        set { internalJson["caption"].string = newValue }
    }

    public var gifFileId: String {
        get { return internalJson["gif_file_id"].stringValue }
        set { internalJson["gif_file_id"].stringValue = newValue }
    }

    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var inputMessageContent: InputMessageContent? {
        get {
            fatalError("Not implemented")
        }
        set {
            internalJson["input_message_content"] = JSON(newValue?.json ?? JSON.null)
        }
    }

    public var parseModeString: String? {
        get { return internalJson["parse_mode_string"].string }
        set { internalJson["parse_mode_string"].string = newValue }
    }

    public var replyMarkup: InlineKeyboardMarkup? {
        get {
            let value = internalJson["reply_markup"]
            return value.isNullOrUnknown ? nil : InlineKeyboardMarkup(internalJson: value)
        }
        set {
            internalJson["reply_markup"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var title: String? {
        get { return internalJson["title"].string }
        set { internalJson["title"].string = newValue }
    }

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InlineQueryResultCachedDocument: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var caption: String? {
        get { return internalJson["caption"].string }
        set { internalJson["caption"].string = newValue }
    }

    public var description: String? {
        get { return internalJson["description"].string }
        set { internalJson["description"].string = newValue }
    }

    public var documentFileId: String {
        get { return internalJson["document_file_id"].stringValue }
        set { internalJson["document_file_id"].stringValue = newValue }
    }

    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var inputMessageContent: InputMessageContent? {
        get {
            fatalError("Not implemented")
        }
        set {
            internalJson["input_message_content"] = JSON(newValue?.json ?? JSON.null)
        }
    }

    public var parseModeString: String? {
        get { return internalJson["parse_mode_string"].string }
        set { internalJson["parse_mode_string"].string = newValue }
    }

    public var replyMarkup: InlineKeyboardMarkup? {
        get {
            let value = internalJson["reply_markup"]
            return value.isNullOrUnknown ? nil : InlineKeyboardMarkup(internalJson: value)
        }
        set {
            internalJson["reply_markup"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var title: String {
        get { return internalJson["title"].stringValue }
        set { internalJson["title"].stringValue = newValue }
    }

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InlineQueryResultVoice: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var caption: String? {
        get { return internalJson["caption"].string }
        set { internalJson["caption"].string = newValue }
    }

    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var inputMessageContent: InputMessageContent? {
        get {
            fatalError("Not implemented")
        }
        set {
            internalJson["input_message_content"] = JSON(newValue?.json ?? JSON.null)
        }
    }

    public var parseModeString: String? {
        get { return internalJson["parse_mode_string"].string }
        set { internalJson["parse_mode_string"].string = newValue }
    }

    public var replyMarkup: InlineKeyboardMarkup? {
        get {
            let value = internalJson["reply_markup"]
            return value.isNullOrUnknown ? nil : InlineKeyboardMarkup(internalJson: value)
        }
        set {
            internalJson["reply_markup"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var title: String {
        get { return internalJson["title"].stringValue }
        set { internalJson["title"].stringValue = newValue }
    }

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    public var voiceDuration: Int? {
        get { return internalJson["voice_duration"].int }
        set { internalJson["voice_duration"].int = newValue }
    }

    public var voiceUrl: String {
        get { return internalJson["voice_url"].stringValue }
        set { internalJson["voice_url"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InputMediaVideo: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var caption: String? {
        get { return internalJson["caption"].string }
        set { internalJson["caption"].string = newValue }
    }

    public var duration: Int? {
        get { return internalJson["duration"].int }
        set { internalJson["duration"].int = newValue }
    }

    public var height: Int? {
        get { return internalJson["height"].int }
        set { internalJson["height"].int = newValue }
    }

    public var media: String {
        get { return internalJson["media"].stringValue }
        set { internalJson["media"].stringValue = newValue }
    }

    public var parseModeString: String? {
        get { return internalJson["parse_mode_string"].string }
        set { internalJson["parse_mode_string"].string = newValue }
    }

    public var supportsStreaming: Bool? {
        get { return internalJson["supports_streaming"].bool }
        set { internalJson["supports_streaming"].bool = newValue }
    }

public var thumb: InputFileOrString? = nil

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    public var width: Int? {
        get { return internalJson["width"].int }
        set { internalJson["width"].int = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InlineQueryResultVideo: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var caption: String? {
        get { return internalJson["caption"].string }
        set { internalJson["caption"].string = newValue }
    }

    public var description: String? {
        get { return internalJson["description"].string }
        set { internalJson["description"].string = newValue }
    }

    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var inputMessageContent: InputMessageContent? {
        get {
            fatalError("Not implemented")
        }
        set {
            internalJson["input_message_content"] = JSON(newValue?.json ?? JSON.null)
        }
    }

    public var mimeType: String {
        get { return internalJson["mime_type"].stringValue }
        set { internalJson["mime_type"].stringValue = newValue }
    }

    public var parseModeString: String? {
        get { return internalJson["parse_mode_string"].string }
        set { internalJson["parse_mode_string"].string = newValue }
    }

    public var replyMarkup: InlineKeyboardMarkup? {
        get {
            let value = internalJson["reply_markup"]
            return value.isNullOrUnknown ? nil : InlineKeyboardMarkup(internalJson: value)
        }
        set {
            internalJson["reply_markup"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var thumbUrl: String {
        get { return internalJson["thumb_url"].stringValue }
        set { internalJson["thumb_url"].stringValue = newValue }
    }

    public var title: String {
        get { return internalJson["title"].stringValue }
        set { internalJson["title"].stringValue = newValue }
    }

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    public var videoDuration: Int? {
        get { return internalJson["video_duration"].int }
        set { internalJson["video_duration"].int = newValue }
    }

    public var videoHeight: Int? {
        get { return internalJson["video_height"].int }
        set { internalJson["video_height"].int = newValue }
    }

    public var videoUrl: String {
        get { return internalJson["video_url"].stringValue }
        set { internalJson["video_url"].stringValue = newValue }
    }

    public var videoWidth: Int? {
        get { return internalJson["video_width"].int }
        set { internalJson["video_width"].int = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct PreCheckoutQuery: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var currency: Int {
        get { return internalJson["currency"].intValue }
        set { internalJson["currency"].intValue = newValue }
    }

    public var from: User {
        get { return User(internalJson: internalJson["from"]) }
        set { internalJson["from"] = JSON(newValue.json) }
    }

    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var invoicePayload: String {
        get { return internalJson["invoice_payload"].stringValue }
        set { internalJson["invoice_payload"].stringValue = newValue }
    }

    public var orderInfo: OrderInfo? {
        get {
            let value = internalJson["order_info"]
            return value.isNullOrUnknown ? nil : OrderInfo(internalJson: value)
        }
        set {
            internalJson["order_info"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var shippingOptionId: String? {
        get { return internalJson["shipping_option_id"].string }
        set { internalJson["shipping_option_id"].string = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct KeyboardButton: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var requestContact: Bool? {
        get { return internalJson["request_contact"].bool }
        set { internalJson["request_contact"].bool = newValue }
    }

    public var requestLocation: Bool? {
        get { return internalJson["request_location"].bool }
        set { internalJson["request_location"].bool = newValue }
    }

    public var text: String {
        get { return internalJson["text"].stringValue }
        set { internalJson["text"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InlineQuery: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var from: User {
        get { return User(internalJson: internalJson["from"]) }
        set { internalJson["from"] = JSON(newValue.json) }
    }

    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var location: Location? {
        get {
            let value = internalJson["location"]
            return value.isNullOrUnknown ? nil : Location(internalJson: value)
        }
        set {
            internalJson["location"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var offset: String {
        get { return internalJson["offset"].stringValue }
        set { internalJson["offset"].stringValue = newValue }
    }

    public var query: String {
        get { return internalJson["query"].stringValue }
        set { internalJson["query"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct CallbackGame: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct WebhookInfo: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var allowedUpdates: String? {
        get { return internalJson["allowed_updates"].string }
        set { internalJson["allowed_updates"].string = newValue }
    }

    public var hasCustomCertificate: Bool {
        get { return internalJson["has_custom_certificate"].boolValue }
        set { internalJson["has_custom_certificate"].boolValue = newValue }
    }

    public var lastErrorDate: Date? {
        get {
            guard let date = internalJson["last_error_date"].double else { return nil }
            return Date(timeIntervalSince1970: date)
        }
        set {
            internalJson["last_error_date"].double = newValue?.timeIntervalSince1970
        }
    }

    public var lastErrorMessage: String? {
        get { return internalJson["last_error_message"].string }
        set { internalJson["last_error_message"].string = newValue }
    }

    public var maxConnections: Int? {
        get { return internalJson["max_connections"].int }
        set { internalJson["max_connections"].int = newValue }
    }

    public var pendingUpdateCount: Int {
        get { return internalJson["pending_update_count"].intValue }
        set { internalJson["pending_update_count"].intValue = newValue }
    }

    public var url: String {
        get { return internalJson["url"].stringValue }
        set { internalJson["url"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InlineQueryResultMpeg4Gif: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var caption: String? {
        get { return internalJson["caption"].string }
        set { internalJson["caption"].string = newValue }
    }

    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var inputMessageContent: InputMessageContent? {
        get {
            fatalError("Not implemented")
        }
        set {
            internalJson["input_message_content"] = JSON(newValue?.json ?? JSON.null)
        }
    }

    public var mpeg4Duration: Int? {
        get { return internalJson["mpeg4_duration"].int }
        set { internalJson["mpeg4_duration"].int = newValue }
    }

    public var mpeg4Height: Int? {
        get { return internalJson["mpeg4_height"].int }
        set { internalJson["mpeg4_height"].int = newValue }
    }

    public var mpeg4Url: String {
        get { return internalJson["mpeg4_url"].stringValue }
        set { internalJson["mpeg4_url"].stringValue = newValue }
    }

    public var mpeg4Width: Int? {
        get { return internalJson["mpeg4_width"].int }
        set { internalJson["mpeg4_width"].int = newValue }
    }

    public var parseModeString: String? {
        get { return internalJson["parse_mode_string"].string }
        set { internalJson["parse_mode_string"].string = newValue }
    }

    public var replyMarkup: InlineKeyboardMarkup? {
        get {
            let value = internalJson["reply_markup"]
            return value.isNullOrUnknown ? nil : InlineKeyboardMarkup(internalJson: value)
        }
        set {
            internalJson["reply_markup"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var thumbUrl: String {
        get { return internalJson["thumb_url"].stringValue }
        set { internalJson["thumb_url"].stringValue = newValue }
    }

    public var title: String? {
        get { return internalJson["title"].string }
        set { internalJson["title"].string = newValue }
    }

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct CallbackQuery: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var chatInstance: String {
        get { return internalJson["chat_instance"].stringValue }
        set { internalJson["chat_instance"].stringValue = newValue }
    }

    public var data: String? {
        get { return internalJson["data"].string }
        set { internalJson["data"].string = newValue }
    }

    public var from: User {
        get { return User(internalJson: internalJson["from"]) }
        set { internalJson["from"] = JSON(newValue.json) }
    }

    public var gameShortName: String? {
        get { return internalJson["game_short_name"].string }
        set { internalJson["game_short_name"].string = newValue }
    }

    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var inlineMessageId: String? {
        get { return internalJson["inline_message_id"].string }
        set { internalJson["inline_message_id"].string = newValue }
    }

    public var message: Message? {
        get {
            let value = internalJson["message"]
            return value.isNullOrUnknown ? nil : Message(internalJson: value)
        }
        set {
            internalJson["message"] = newValue?.internalJson ?? JSON.null
        }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InputMediaPhoto: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var caption: String? {
        get { return internalJson["caption"].string }
        set { internalJson["caption"].string = newValue }
    }

    public var media: String {
        get { return internalJson["media"].stringValue }
        set { internalJson["media"].stringValue = newValue }
    }

    public var parseModeString: String? {
        get { return internalJson["parse_mode_string"].string }
        set { internalJson["parse_mode_string"].string = newValue }
    }

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct LoginUrl: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var botUsername: String? {
        get { return internalJson["bot_username"].string }
        set { internalJson["bot_username"].string = newValue }
    }

    public var forwardText: String? {
        get { return internalJson["forward_text"].string }
        set { internalJson["forward_text"].string = newValue }
    }

    public var requestWriteAccess: Bool? {
        get { return internalJson["request_write_access"].bool }
        set { internalJson["request_write_access"].bool = newValue }
    }

    public var url: String {
        get { return internalJson["url"].stringValue }
        set { internalJson["url"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct ChosenInlineResult: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var from: User {
        get { return User(internalJson: internalJson["from"]) }
        set { internalJson["from"] = JSON(newValue.json) }
    }

    public var inlineMessageId: String? {
        get { return internalJson["inline_message_id"].string }
        set { internalJson["inline_message_id"].string = newValue }
    }

    public var location: Location {
        get { return Location(internalJson: internalJson["location"]) }
        set { internalJson["location"] = JSON(newValue.json) }
    }

    public var query: String {
        get { return internalJson["query"].stringValue }
        set { internalJson["query"].stringValue = newValue }
    }

    public var resultId: String {
        get { return internalJson["result_id"].stringValue }
        set { internalJson["result_id"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InlineQueryResultCachedMpeg4Gif: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var caption: String? {
        get { return internalJson["caption"].string }
        set { internalJson["caption"].string = newValue }
    }

    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var inputMessageContent: InputMessageContent? {
        get {
            fatalError("Not implemented")
        }
        set {
            internalJson["input_message_content"] = JSON(newValue?.json ?? JSON.null)
        }
    }

    public var mpeg4FileId: String {
        get { return internalJson["mpeg4_file_id"].stringValue }
        set { internalJson["mpeg4_file_id"].stringValue = newValue }
    }

    public var parseModeString: String? {
        get { return internalJson["parse_mode_string"].string }
        set { internalJson["parse_mode_string"].string = newValue }
    }

    public var replyMarkup: InlineKeyboardMarkup? {
        get {
            let value = internalJson["reply_markup"]
            return value.isNullOrUnknown ? nil : InlineKeyboardMarkup(internalJson: value)
        }
        set {
            internalJson["reply_markup"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var title: String? {
        get { return internalJson["title"].string }
        set { internalJson["title"].string = newValue }
    }

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InlineQueryResultCachedVoice: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var caption: String? {
        get { return internalJson["caption"].string }
        set { internalJson["caption"].string = newValue }
    }

    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var inputMessageContent: InputMessageContent? {
        get {
            fatalError("Not implemented")
        }
        set {
            internalJson["input_message_content"] = JSON(newValue?.json ?? JSON.null)
        }
    }

    public var parseModeString: String? {
        get { return internalJson["parse_mode_string"].string }
        set { internalJson["parse_mode_string"].string = newValue }
    }

    public var replyMarkup: InlineKeyboardMarkup? {
        get {
            let value = internalJson["reply_markup"]
            return value.isNullOrUnknown ? nil : InlineKeyboardMarkup(internalJson: value)
        }
        set {
            internalJson["reply_markup"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var title: String {
        get { return internalJson["title"].stringValue }
        set { internalJson["title"].stringValue = newValue }
    }

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    public var voiceFileId: String {
        get { return internalJson["voice_file_id"].stringValue }
        set { internalJson["voice_file_id"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InlineQueryResultContact: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var firstName: String {
        get { return internalJson["first_name"].stringValue }
        set { internalJson["first_name"].stringValue = newValue }
    }

    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var inputMessageContent: InputMessageContent? {
        get {
            fatalError("Not implemented")
        }
        set {
            internalJson["input_message_content"] = JSON(newValue?.json ?? JSON.null)
        }
    }

    public var lastName: String? {
        get { return internalJson["last_name"].string }
        set { internalJson["last_name"].string = newValue }
    }

    public var phoneNumber: String {
        get { return internalJson["phone_number"].stringValue }
        set { internalJson["phone_number"].stringValue = newValue }
    }

    public var replyMarkup: InlineKeyboardMarkup? {
        get {
            let value = internalJson["reply_markup"]
            return value.isNullOrUnknown ? nil : InlineKeyboardMarkup(internalJson: value)
        }
        set {
            internalJson["reply_markup"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var thumbHeight: Int? {
        get { return internalJson["thumb_height"].int }
        set { internalJson["thumb_height"].int = newValue }
    }

    public var thumbUrl: String? {
        get { return internalJson["thumb_url"].string }
        set { internalJson["thumb_url"].string = newValue }
    }

    public var thumbWidth: Int? {
        get { return internalJson["thumb_width"].int }
        set { internalJson["thumb_width"].int = newValue }
    }

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    public var vcard: String? {
        get { return internalJson["vcard"].string }
        set { internalJson["vcard"].string = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InlineQueryResultCachedAudio: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var audioFileId: String {
        get { return internalJson["audio_file_id"].stringValue }
        set { internalJson["audio_file_id"].stringValue = newValue }
    }

    public var caption: String? {
        get { return internalJson["caption"].string }
        set { internalJson["caption"].string = newValue }
    }

    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var inputMessageContent: InputMessageContent? {
        get {
            fatalError("Not implemented")
        }
        set {
            internalJson["input_message_content"] = JSON(newValue?.json ?? JSON.null)
        }
    }

    public var parseModeString: String? {
        get { return internalJson["parse_mode_string"].string }
        set { internalJson["parse_mode_string"].string = newValue }
    }

    public var replyMarkup: InlineKeyboardMarkup? {
        get {
            let value = internalJson["reply_markup"]
            return value.isNullOrUnknown ? nil : InlineKeyboardMarkup(internalJson: value)
        }
        set {
            internalJson["reply_markup"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct Venue: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var address: String {
        get { return internalJson["address"].stringValue }
        set { internalJson["address"].stringValue = newValue }
    }

    public var foursquareId: String? {
        get { return internalJson["foursquare_id"].string }
        set { internalJson["foursquare_id"].string = newValue }
    }

    public var foursquareType: String? {
        get { return internalJson["foursquare_type"].string }
        set { internalJson["foursquare_type"].string = newValue }
    }

    public var location: Location {
        get { return Location(internalJson: internalJson["location"]) }
        set { internalJson["location"] = JSON(newValue.json) }
    }

    public var title: String {
        get { return internalJson["title"].stringValue }
        set { internalJson["title"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct ShippingOption: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var prices: [LabeledPrice] {
        get { return internalJson["prices"].customArrayValue() }
        set { internalJson["prices"] = JSON.initFrom(newValue) }
    }

    public var title: String {
        get { return internalJson["title"].stringValue }
        set { internalJson["title"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct ReplyKeyboardRemove: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var removeKeyboard: Bool {
        get { return internalJson["remove_keyboard"].boolValue }
        set { internalJson["remove_keyboard"].boolValue = newValue }
    }

    public var selective: Bool? {
        get { return internalJson["selective"].bool }
        set { internalJson["selective"].bool = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InlineQueryResultAudio: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var audioDuration: Int? {
        get { return internalJson["audio_duration"].int }
        set { internalJson["audio_duration"].int = newValue }
    }

    public var audioUrl: String {
        get { return internalJson["audio_url"].stringValue }
        set { internalJson["audio_url"].stringValue = newValue }
    }

    public var caption: String? {
        get { return internalJson["caption"].string }
        set { internalJson["caption"].string = newValue }
    }

    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var inputMessageContent: InputMessageContent? {
        get {
            fatalError("Not implemented")
        }
        set {
            internalJson["input_message_content"] = JSON(newValue?.json ?? JSON.null)
        }
    }

    public var parseModeString: String? {
        get { return internalJson["parse_mode_string"].string }
        set { internalJson["parse_mode_string"].string = newValue }
    }

    public var performer: String? {
        get { return internalJson["performer"].string }
        set { internalJson["performer"].string = newValue }
    }

    public var replyMarkup: InlineKeyboardMarkup? {
        get {
            let value = internalJson["reply_markup"]
            return value.isNullOrUnknown ? nil : InlineKeyboardMarkup(internalJson: value)
        }
        set {
            internalJson["reply_markup"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var title: String {
        get { return internalJson["title"].stringValue }
        set { internalJson["title"].stringValue = newValue }
    }

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct Invoice: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var currency: String {
        get { return internalJson["currency"].stringValue }
        set { internalJson["currency"].stringValue = newValue }
    }

    public var description: String {
        get { return internalJson["description"].stringValue }
        set { internalJson["description"].stringValue = newValue }
    }

    public var startParameter: String {
        get { return internalJson["start_parameter"].stringValue }
        set { internalJson["start_parameter"].stringValue = newValue }
    }

    public var title: String {
        get { return internalJson["title"].stringValue }
        set { internalJson["title"].stringValue = newValue }
    }

    public var totalAmount: Int {
        get { return internalJson["total_amount"].intValue }
        set { internalJson["total_amount"].intValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct File: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var fileId: String {
        get { return internalJson["file_id"].stringValue }
        set { internalJson["file_id"].stringValue = newValue }
    }

    public var filePath: String? {
        get { return internalJson["file_path"].string }
        set { internalJson["file_path"].string = newValue }
    }

    public var fileSize: Int? {
        get { return internalJson["file_size"].int }
        set { internalJson["file_size"].int = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct PhotoSize: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var fileId: Int {
        get { return internalJson["file_id"].intValue }
        set { internalJson["file_id"].intValue = newValue }
    }

    public var fileSize: Int? {
        get { return internalJson["file_size"].int }
        set { internalJson["file_size"].int = newValue }
    }

    public var height: Int {
        get { return internalJson["height"].intValue }
        set { internalJson["height"].intValue = newValue }
    }

    public var width: Int {
        get { return internalJson["width"].intValue }
        set { internalJson["width"].intValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InlineQueryResultGif: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var caption: String? {
        get { return internalJson["caption"].string }
        set { internalJson["caption"].string = newValue }
    }

    public var gifDuration: Int? {
        get { return internalJson["gif_duration"].int }
        set { internalJson["gif_duration"].int = newValue }
    }

    public var gifHeight: Int? {
        get { return internalJson["gif_height"].int }
        set { internalJson["gif_height"].int = newValue }
    }

    public var gifUrl: String {
        get { return internalJson["gif_url"].stringValue }
        set { internalJson["gif_url"].stringValue = newValue }
    }

    public var gifWidth: Int? {
        get { return internalJson["gif_width"].int }
        set { internalJson["gif_width"].int = newValue }
    }

    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var inputMessageContent: InputMessageContent? {
        get {
            fatalError("Not implemented")
        }
        set {
            internalJson["input_message_content"] = JSON(newValue?.json ?? JSON.null)
        }
    }

    public var parseModeString: String? {
        get { return internalJson["parse_mode_string"].string }
        set { internalJson["parse_mode_string"].string = newValue }
    }

    public var replyMarkup: InlineKeyboardMarkup? {
        get {
            let value = internalJson["reply_markup"]
            return value.isNullOrUnknown ? nil : InlineKeyboardMarkup(internalJson: value)
        }
        set {
            internalJson["reply_markup"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var thumbUrl: String {
        get { return internalJson["thumb_url"].stringValue }
        set { internalJson["thumb_url"].stringValue = newValue }
    }

    public var title: String? {
        get { return internalJson["title"].string }
        set { internalJson["title"].string = newValue }
    }

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct ChatMember: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var canAddWebPagePreviews: Bool? {
        get { return internalJson["can_add_web_page_previews"].bool }
        set { internalJson["can_add_web_page_previews"].bool = newValue }
    }

    public var canBeEdited: Bool? {
        get { return internalJson["can_be_edited"].bool }
        set { internalJson["can_be_edited"].bool = newValue }
    }

    public var canChangeInfo: Bool? {
        get { return internalJson["can_change_info"].bool }
        set { internalJson["can_change_info"].bool = newValue }
    }

    public var canDeleteMessages: Bool? {
        get { return internalJson["can_delete_messages"].bool }
        set { internalJson["can_delete_messages"].bool = newValue }
    }

    public var canEditMessages: Bool? {
        get { return internalJson["can_edit_messages"].bool }
        set { internalJson["can_edit_messages"].bool = newValue }
    }

    public var canInviteUsers: Bool? {
        get { return internalJson["can_invite_users"].bool }
        set { internalJson["can_invite_users"].bool = newValue }
    }

    public var canPinMessages: Bool? {
        get { return internalJson["can_pin_messages"].bool }
        set { internalJson["can_pin_messages"].bool = newValue }
    }

    public var canPostMessages: Bool? {
        get { return internalJson["can_post_messages"].bool }
        set { internalJson["can_post_messages"].bool = newValue }
    }

    public var canPromoteMembers: Bool? {
        get { return internalJson["can_promote_members"].bool }
        set { internalJson["can_promote_members"].bool = newValue }
    }

    public var canRestrictMembers: Bool? {
        get { return internalJson["can_restrict_members"].bool }
        set { internalJson["can_restrict_members"].bool = newValue }
    }

    public var canSendMediaMessages: Bool? {
        get { return internalJson["can_send_media_messages"].bool }
        set { internalJson["can_send_media_messages"].bool = newValue }
    }

    public var canSendMessages: Bool? {
        get { return internalJson["can_send_messages"].bool }
        set { internalJson["can_send_messages"].bool = newValue }
    }

    public var canSendOtherMessages: Bool? {
        get { return internalJson["can_send_other_messages"].bool }
        set { internalJson["can_send_other_messages"].bool = newValue }
    }

    public var isMember: Bool? {
        get { return internalJson["is_member"].bool }
        set { internalJson["is_member"].bool = newValue }
    }

    public var statusString: String {
        get { return internalJson["status_string"].stringValue }
        set { internalJson["status_string"].stringValue = newValue }
    }

    public var untilDate: Date? {
        get {
            guard let date = internalJson["until_date"].double else { return nil }
            return Date(timeIntervalSince1970: date)
        }
        set {
            internalJson["until_date"].double = newValue?.timeIntervalSince1970
        }
    }

    public var user: User {
        get { return User(internalJson: internalJson["user"]) }
        set { internalJson["user"] = JSON(newValue.json) }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct Animation: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var duration: Int {
        get { return internalJson["duration"].intValue }
        set { internalJson["duration"].intValue = newValue }
    }

    public var fileId: Int {
        get { return internalJson["file_id"].intValue }
        set { internalJson["file_id"].intValue = newValue }
    }

    public var fileName: String? {
        get { return internalJson["file_name"].string }
        set { internalJson["file_name"].string = newValue }
    }

    public var fileSize: Int? {
        get { return internalJson["file_size"].int }
        set { internalJson["file_size"].int = newValue }
    }

    public var height: Int {
        get { return internalJson["height"].intValue }
        set { internalJson["height"].intValue = newValue }
    }

    public var mimeType: String? {
        get { return internalJson["mime_type"].string }
        set { internalJson["mime_type"].string = newValue }
    }

    public var thumb: PhotoSize? {
        get {
            let value = internalJson["thumb"]
            return value.isNullOrUnknown ? nil : PhotoSize(internalJson: value)
        }
        set {
            internalJson["thumb"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var width: Int {
        get { return internalJson["width"].intValue }
        set { internalJson["width"].intValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct Document: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var fileId: Int {
        get { return internalJson["file_id"].intValue }
        set { internalJson["file_id"].intValue = newValue }
    }

    public var fileName: String? {
        get { return internalJson["file_name"].string }
        set { internalJson["file_name"].string = newValue }
    }

    public var fileSize: Int? {
        get { return internalJson["file_size"].int }
        set { internalJson["file_size"].int = newValue }
    }

    public var mimeType: String? {
        get { return internalJson["mime_type"].string }
        set { internalJson["mime_type"].string = newValue }
    }

    public var thumb: PhotoSize? {
        get {
            let value = internalJson["thumb"]
            return value.isNullOrUnknown ? nil : PhotoSize(internalJson: value)
        }
        set {
            internalJson["thumb"] = newValue?.internalJson ?? JSON.null
        }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct User: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var firstName: String {
        get { return internalJson["first_name"].stringValue }
        set { internalJson["first_name"].stringValue = newValue }
    }

    public var id: Int64 {
        get { return internalJson["id"].int64Value }
        set { internalJson["id"].int64Value = newValue }
    }

    public var isBot: Bool {
        get { return internalJson["is_bot"].boolValue }
        set { internalJson["is_bot"].boolValue = newValue }
    }

    public var languageCode: String? {
        get { return internalJson["language_code"].string }
        set { internalJson["language_code"].string = newValue }
    }

    public var lastName: String? {
        get { return internalJson["last_name"].string }
        set { internalJson["last_name"].string = newValue }
    }

    public var username: String? {
        get { return internalJson["username"].string }
        set { internalJson["username"].string = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct ShippingAddress: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var city: String {
        get { return internalJson["city"].stringValue }
        set { internalJson["city"].stringValue = newValue }
    }

    public var countryCode: String {
        get { return internalJson["country_code"].stringValue }
        set { internalJson["country_code"].stringValue = newValue }
    }

    public var postCode: String {
        get { return internalJson["post_code"].stringValue }
        set { internalJson["post_code"].stringValue = newValue }
    }

    public var state: String {
        get { return internalJson["state"].stringValue }
        set { internalJson["state"].stringValue = newValue }
    }

    public var streetLine1: String {
        get { return internalJson["street_line1"].stringValue }
        set { internalJson["street_line1"].stringValue = newValue }
    }

    public var streetLine2: String {
        get { return internalJson["street_line2"].stringValue }
        set { internalJson["street_line2"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct GameHighScore: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var position: Int {
        get { return internalJson["position"].intValue }
        set { internalJson["position"].intValue = newValue }
    }

    public var score: Int {
        get { return internalJson["score"].intValue }
        set { internalJson["score"].intValue = newValue }
    }

    public var user: User {
        get { return User(internalJson: internalJson["user"]) }
        set { internalJson["user"] = JSON(newValue.json) }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InputMediaAudio: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var caption: String? {
        get { return internalJson["caption"].string }
        set { internalJson["caption"].string = newValue }
    }

    public var duration: Int? {
        get { return internalJson["duration"].int }
        set { internalJson["duration"].int = newValue }
    }

    public var media: String {
        get { return internalJson["media"].stringValue }
        set { internalJson["media"].stringValue = newValue }
    }

    public var parseModeString: String? {
        get { return internalJson["parse_mode_string"].string }
        set { internalJson["parse_mode_string"].string = newValue }
    }

    public var performer: String? {
        get { return internalJson["performer"].string }
        set { internalJson["performer"].string = newValue }
    }

public var thumb: InputFileOrString? = nil

    public var title: String? {
        get { return internalJson["title"].string }
        set { internalJson["title"].string = newValue }
    }

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct Message: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var animation: Animation? {
        get {
            let value = internalJson["animation"]
            return value.isNullOrUnknown ? nil : Animation(internalJson: value)
        }
        set {
            internalJson["animation"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var audio: Audio? {
        get {
            let value = internalJson["audio"]
            return value.isNullOrUnknown ? nil : Audio(internalJson: value)
        }
        set {
            internalJson["audio"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var authorSignature: String? {
        get { return internalJson["author_signature"].string }
        set { internalJson["author_signature"].string = newValue }
    }

    public var caption: String? {
        get { return internalJson["caption"].string }
        set { internalJson["caption"].string = newValue }
    }

    public var captionEntities: [MessageEntity] {
        get { return internalJson["caption_entities"].customArrayValue() }
        set { internalJson["caption_entities"] = newValue.isEmpty ? JSON.null : JSON.initFrom(newValue) }
    }

    public var channelChatCreated: Bool? {
        get { return internalJson["channel_chat_created"].bool }
        set { internalJson["channel_chat_created"].bool = newValue }
    }

    public var chat: Chat {
        get { return Chat(internalJson: internalJson["chat"]) }
        set { internalJson["chat"] = JSON(newValue.json) }
    }

    public var connectedWebsite: String? {
        get { return internalJson["connected_website"].string }
        set { internalJson["connected_website"].string = newValue }
    }

    public var contact: Contact? {
        get {
            let value = internalJson["contact"]
            return value.isNullOrUnknown ? nil : Contact(internalJson: value)
        }
        set {
            internalJson["contact"] = newValue?.internalJson ?? JSON.null
        }
    }

public var date: Date {
        get { return Date(timeIntervalSince1970: internalJson["date"].doubleValue) }
        set { internalJson["date"].double = newValue.timeIntervalSince1970 }
    }

    public var deleteChatPhoto: Bool? {
        get { return internalJson["delete_chat_photo"].bool }
        set { internalJson["delete_chat_photo"].bool = newValue }
    }

    public var document: Document? {
        get {
            let value = internalJson["document"]
            return value.isNullOrUnknown ? nil : Document(internalJson: value)
        }
        set {
            internalJson["document"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var editDate: Date? {
        get {
            guard let date = internalJson["edit_date"].double else { return nil }
            return Date(timeIntervalSince1970: date)
        }
        set {
            internalJson["edit_date"].double = newValue?.timeIntervalSince1970
        }
    }

    public var entities: [MessageEntity] {
        get { return internalJson["entities"].customArrayValue() }
        set { internalJson["entities"] = newValue.isEmpty ? JSON.null : JSON.initFrom(newValue) }
    }

    public var forwardDate: Date? {
        get {
            guard let date = internalJson["forward_date"].double else { return nil }
            return Date(timeIntervalSince1970: date)
        }
        set {
            internalJson["forward_date"].double = newValue?.timeIntervalSince1970
        }
    }

    public var forwardFrom: User? {
        get {
            let value = internalJson["forward_from"]
            return value.isNullOrUnknown ? nil : User(internalJson: value)
        }
        set {
            internalJson["forward_from"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var forwardFromChat: Chat? {
        get {
            let value = internalJson["forward_from_chat"]
            return value.isNullOrUnknown ? nil : Chat(internalJson: value)
        }
        set {
            internalJson["forward_from_chat"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var forwardFromMessageId: Int? {
        get { return internalJson["forward_from_message_id"].int }
        set { internalJson["forward_from_message_id"].int = newValue }
    }

    public var forwardSenderName: String? {
        get { return internalJson["forward_sender_name"].string }
        set { internalJson["forward_sender_name"].string = newValue }
    }

    public var forwardSignature: String? {
        get { return internalJson["forward_signature"].string }
        set { internalJson["forward_signature"].string = newValue }
    }

    public var from: User? {
        get {
            let value = internalJson["from"]
            return value.isNullOrUnknown ? nil : User(internalJson: value)
        }
        set {
            internalJson["from"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var game: Game? {
        get {
            let value = internalJson["game"]
            return value.isNullOrUnknown ? nil : Game(internalJson: value)
        }
        set {
            internalJson["game"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var groupChatCreated: Bool? {
        get { return internalJson["group_chat_created"].bool }
        set { internalJson["group_chat_created"].bool = newValue }
    }

    public var invoice: Invoice? {
        get {
            let value = internalJson["invoice"]
            return value.isNullOrUnknown ? nil : Invoice(internalJson: value)
        }
        set {
            internalJson["invoice"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var leftChatMember: User? {
        get {
            let value = internalJson["left_chat_member"]
            return value.isNullOrUnknown ? nil : User(internalJson: value)
        }
        set {
            internalJson["left_chat_member"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var location: Location? {
        get {
            let value = internalJson["location"]
            return value.isNullOrUnknown ? nil : Location(internalJson: value)
        }
        set {
            internalJson["location"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var mediaGroupId: String? {
        get { return internalJson["media_group_id"].string }
        set { internalJson["media_group_id"].string = newValue }
    }

    public var messageId: Int {
        get { return internalJson["message_id"].intValue }
        set { internalJson["message_id"].intValue = newValue }
    }

    public var migrateFromChatId: Int64? {
        get { return internalJson["migrate_from_chat_id"].int64 }
        set { internalJson["migrate_from_chat_id"].int64 = newValue }
    }

    public var migrateToChatId: Int64? {
        get { return internalJson["migrate_to_chat_id"].int64 }
        set { internalJson["migrate_to_chat_id"].int64 = newValue }
    }

    public var newChatMembers: [User] {
        get { return internalJson["new_chat_members"].customArrayValue() }
        set { internalJson["new_chat_members"] = newValue.isEmpty ? JSON.null : JSON.initFrom(newValue) }
    }

    public var newChatPhoto: [PhotoSize] {
        get { return internalJson["new_chat_photo"].customArrayValue() }
        set { internalJson["new_chat_photo"] = newValue.isEmpty ? JSON.null : JSON.initFrom(newValue) }
    }

    public var newChatTitle: String? {
        get { return internalJson["new_chat_title"].string }
        set { internalJson["new_chat_title"].string = newValue }
    }

    public var photo: [PhotoSize] {
        get { return internalJson["photo"].customArrayValue() }
        set { internalJson["photo"] = newValue.isEmpty ? JSON.null : JSON.initFrom(newValue) }
    }

    public var pinnedMessage: Message? {
        get {
            let value = internalJson["pinned_message"]
            return value.isNullOrUnknown ? nil : Message(internalJson: value)
        }
        set {
            internalJson["pinned_message"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var poll: Poll? {
        get {
            let value = internalJson["poll"]
            return value.isNullOrUnknown ? nil : Poll(internalJson: value)
        }
        set {
            internalJson["poll"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var replyMarkup: InlineKeyboardMarkup? {
        get {
            let value = internalJson["reply_markup"]
            return value.isNullOrUnknown ? nil : InlineKeyboardMarkup(internalJson: value)
        }
        set {
            internalJson["reply_markup"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var replyToMessage: Message? {
        get {
            let value = internalJson["reply_to_message"]
            return value.isNullOrUnknown ? nil : Message(internalJson: value)
        }
        set {
            internalJson["reply_to_message"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var sticker: Sticker? {
        get {
            let value = internalJson["sticker"]
            return value.isNullOrUnknown ? nil : Sticker(internalJson: value)
        }
        set {
            internalJson["sticker"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var successfulPayment: SuccessfulPayment? {
        get {
            let value = internalJson["successful_payment"]
            return value.isNullOrUnknown ? nil : SuccessfulPayment(internalJson: value)
        }
        set {
            internalJson["successful_payment"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var supergroupChatCreated: Bool? {
        get { return internalJson["supergroup_chat_created"].bool }
        set { internalJson["supergroup_chat_created"].bool = newValue }
    }

    public var text: String? {
        get { return internalJson["text"].string }
        set { internalJson["text"].string = newValue }
    }

    public var venue: Venue? {
        get {
            let value = internalJson["venue"]
            return value.isNullOrUnknown ? nil : Venue(internalJson: value)
        }
        set {
            internalJson["venue"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var video: Video? {
        get {
            let value = internalJson["video"]
            return value.isNullOrUnknown ? nil : Video(internalJson: value)
        }
        set {
            internalJson["video"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var videoNote: VideoNote? {
        get {
            let value = internalJson["video_note"]
            return value.isNullOrUnknown ? nil : VideoNote(internalJson: value)
        }
        set {
            internalJson["video_note"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var voice: Voice? {
        get {
            let value = internalJson["voice"]
            return value.isNullOrUnknown ? nil : Voice(internalJson: value)
        }
        set {
            internalJson["voice"] = newValue?.internalJson ?? JSON.null
        }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct Sticker: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var emoji: String? {
        get { return internalJson["emoji"].string }
        set { internalJson["emoji"].string = newValue }
    }

    public var fileId: String {
        get { return internalJson["file_id"].stringValue }
        set { internalJson["file_id"].stringValue = newValue }
    }

    public var fileSize: Int? {
        get { return internalJson["file_size"].int }
        set { internalJson["file_size"].int = newValue }
    }

    public var height: Int {
        get { return internalJson["height"].intValue }
        set { internalJson["height"].intValue = newValue }
    }

    public var maskPosition: MaskPosition? {
        get {
            let value = internalJson["mask_position"]
            return value.isNullOrUnknown ? nil : MaskPosition(internalJson: value)
        }
        set {
            internalJson["mask_position"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var setName: String? {
        get { return internalJson["set_name"].string }
        set { internalJson["set_name"].string = newValue }
    }

    public var thumb: PhotoSize? {
        get {
            let value = internalJson["thumb"]
            return value.isNullOrUnknown ? nil : PhotoSize(internalJson: value)
        }
        set {
            internalJson["thumb"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var width: Int {
        get { return internalJson["width"].intValue }
        set { internalJson["width"].intValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct Video: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var duration: Int {
        get { return internalJson["duration"].intValue }
        set { internalJson["duration"].intValue = newValue }
    }

    public var fileId: Int {
        get { return internalJson["file_id"].intValue }
        set { internalJson["file_id"].intValue = newValue }
    }

    public var fileSize: String? {
        get { return internalJson["file_size"].string }
        set { internalJson["file_size"].string = newValue }
    }

    public var height: Int {
        get { return internalJson["height"].intValue }
        set { internalJson["height"].intValue = newValue }
    }

    public var mimeType: String? {
        get { return internalJson["mime_type"].string }
        set { internalJson["mime_type"].string = newValue }
    }

    public var thumb: PhotoSize? {
        get {
            let value = internalJson["thumb"]
            return value.isNullOrUnknown ? nil : PhotoSize(internalJson: value)
        }
        set {
            internalJson["thumb"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var width: Int {
        get { return internalJson["width"].intValue }
        set { internalJson["width"].intValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InlineQueryResultVenue: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var address: String {
        get { return internalJson["address"].stringValue }
        set { internalJson["address"].stringValue = newValue }
    }

    public var foursquareId: String? {
        get { return internalJson["foursquare_id"].string }
        set { internalJson["foursquare_id"].string = newValue }
    }

    public var foursquareType: String? {
        get { return internalJson["foursquare_type"].string }
        set { internalJson["foursquare_type"].string = newValue }
    }

    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var inputMessageContent: InputMessageContent? {
        get {
            fatalError("Not implemented")
        }
        set {
            internalJson["input_message_content"] = JSON(newValue?.json ?? JSON.null)
        }
    }

    public var latitude: Float {
        get { return internalJson["latitude"].floatValue }
        set { internalJson["latitude"].floatValue = newValue }
    }

    public var longitude: Float {
        get { return internalJson["longitude"].floatValue }
        set { internalJson["longitude"].floatValue = newValue }
    }

    public var replyMarkup: InlineKeyboardMarkup? {
        get {
            let value = internalJson["reply_markup"]
            return value.isNullOrUnknown ? nil : InlineKeyboardMarkup(internalJson: value)
        }
        set {
            internalJson["reply_markup"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var thumbHeight: Int? {
        get { return internalJson["thumb_height"].int }
        set { internalJson["thumb_height"].int = newValue }
    }

    public var thumbUrl: String? {
        get { return internalJson["thumb_url"].string }
        set { internalJson["thumb_url"].string = newValue }
    }

    public var thumbWidth: Int? {
        get { return internalJson["thumb_width"].int }
        set { internalJson["thumb_width"].int = newValue }
    }

    public var title: String {
        get { return internalJson["title"].stringValue }
        set { internalJson["title"].stringValue = newValue }
    }

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct Voice: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var duration: Int {
        get { return internalJson["duration"].intValue }
        set { internalJson["duration"].intValue = newValue }
    }

    public var fileId: Int {
        get { return internalJson["file_id"].intValue }
        set { internalJson["file_id"].intValue = newValue }
    }

    public var fileSize: Int? {
        get { return internalJson["file_size"].int }
        set { internalJson["file_size"].int = newValue }
    }

    public var mimeType: String? {
        get { return internalJson["mime_type"].string }
        set { internalJson["mime_type"].string = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InlineQueryResultCachedPhoto: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var caption: String? {
        get { return internalJson["caption"].string }
        set { internalJson["caption"].string = newValue }
    }

    public var description: String? {
        get { return internalJson["description"].string }
        set { internalJson["description"].string = newValue }
    }

    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var inputMessageContent: InputMessageContent? {
        get {
            fatalError("Not implemented")
        }
        set {
            internalJson["input_message_content"] = JSON(newValue?.json ?? JSON.null)
        }
    }

    public var parseModeString: String? {
        get { return internalJson["parse_mode_string"].string }
        set { internalJson["parse_mode_string"].string = newValue }
    }

    public var photoFileId: String {
        get { return internalJson["photo_file_id"].stringValue }
        set { internalJson["photo_file_id"].stringValue = newValue }
    }

    public var replyMarkup: InlineKeyboardMarkup? {
        get {
            let value = internalJson["reply_markup"]
            return value.isNullOrUnknown ? nil : InlineKeyboardMarkup(internalJson: value)
        }
        set {
            internalJson["reply_markup"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var title: String? {
        get { return internalJson["title"].string }
        set { internalJson["title"].string = newValue }
    }

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InputTextMessageContent: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var disableWebPagePreview: Bool? {
        get { return internalJson["disable_web_page_preview"].bool }
        set { internalJson["disable_web_page_preview"].bool = newValue }
    }

    public var messageText: String {
        get { return internalJson["message_text"].stringValue }
        set { internalJson["message_text"].stringValue = newValue }
    }

    public var parseModeString: String? {
        get { return internalJson["parse_mode_string"].string }
        set { internalJson["parse_mode_string"].string = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct ShippingQuery: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var from: User {
        get { return User(internalJson: internalJson["from"]) }
        set { internalJson["from"] = JSON(newValue.json) }
    }

    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var invoicePayload: String {
        get { return internalJson["invoice_payload"].stringValue }
        set { internalJson["invoice_payload"].stringValue = newValue }
    }

    public var shippingAddress: ShippingAddress {
        get { return ShippingAddress(internalJson: internalJson["shipping_address"]) }
        set { internalJson["shipping_address"] = JSON(newValue.json) }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InlineQueryResultCachedSticker: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var inputMessageContent: InputMessageContent? {
        get {
            fatalError("Not implemented")
        }
        set {
            internalJson["input_message_content"] = JSON(newValue?.json ?? JSON.null)
        }
    }

    public var replyMarkup: InlineKeyboardMarkup? {
        get {
            let value = internalJson["reply_markup"]
            return value.isNullOrUnknown ? nil : InlineKeyboardMarkup(internalJson: value)
        }
        set {
            internalJson["reply_markup"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var stickerFileId: String {
        get { return internalJson["sticker_file_id"].stringValue }
        set { internalJson["sticker_file_id"].stringValue = newValue }
    }

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct ReplyKeyboardMarkup: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var keyboard: [[KeyboardButton]] {
        get { return internalJson["keyboard"].twoDArrayValue() }
        set {
            var rowsJson = [JSON]()
            rowsJson.reserveCapacity(newValue.count)
            for row in newValue {
                var colsJson = [JSON]()
                colsJson.reserveCapacity(row.count)
                for col in row {
                    let json = col.internalJson
                    colsJson.append(json)
                }
                rowsJson.append(JSON(colsJson))
            }
            internalJson["keyboard"] = JSON(rowsJson)
        }
    }

    public var oneTimeKeyboard: Bool? {
        get { return internalJson["one_time_keyboard"].bool }
        set { internalJson["one_time_keyboard"].bool = newValue }
    }

    public var resizeKeyboard: Bool? {
        get { return internalJson["resize_keyboard"].bool }
        set { internalJson["resize_keyboard"].bool = newValue }
    }

    public var selective: Bool? {
        get { return internalJson["selective"].bool }
        set { internalJson["selective"].bool = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InputMediaAnimation: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var caption: String? {
        get { return internalJson["caption"].string }
        set { internalJson["caption"].string = newValue }
    }

    public var duration: Int? {
        get { return internalJson["duration"].int }
        set { internalJson["duration"].int = newValue }
    }

    public var height: Int? {
        get { return internalJson["height"].int }
        set { internalJson["height"].int = newValue }
    }

    public var media: String {
        get { return internalJson["media"].stringValue }
        set { internalJson["media"].stringValue = newValue }
    }

    public var parseModeString: String? {
        get { return internalJson["parse_mode_string"].string }
        set { internalJson["parse_mode_string"].string = newValue }
    }

public var thumb: InputFileOrString? = nil

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    public var width: Int? {
        get { return internalJson["width"].int }
        set { internalJson["width"].int = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InlineQueryResultDocument: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var caption: String? {
        get { return internalJson["caption"].string }
        set { internalJson["caption"].string = newValue }
    }

    public var description: String? {
        get { return internalJson["description"].string }
        set { internalJson["description"].string = newValue }
    }

    public var documentUrl: String {
        get { return internalJson["document_url"].stringValue }
        set { internalJson["document_url"].stringValue = newValue }
    }

    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var inputMessageContent: InputMessageContent? {
        get {
            fatalError("Not implemented")
        }
        set {
            internalJson["input_message_content"] = JSON(newValue?.json ?? JSON.null)
        }
    }

    public var mimeType: String {
        get { return internalJson["mime_type"].stringValue }
        set { internalJson["mime_type"].stringValue = newValue }
    }

    public var parseModeString: String? {
        get { return internalJson["parse_mode_string"].string }
        set { internalJson["parse_mode_string"].string = newValue }
    }

    public var replyMarkup: InlineKeyboardMarkup? {
        get {
            let value = internalJson["reply_markup"]
            return value.isNullOrUnknown ? nil : InlineKeyboardMarkup(internalJson: value)
        }
        set {
            internalJson["reply_markup"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var thumbHeight: Int? {
        get { return internalJson["thumb_height"].int }
        set { internalJson["thumb_height"].int = newValue }
    }

    public var thumbUrl: String? {
        get { return internalJson["thumb_url"].string }
        set { internalJson["thumb_url"].string = newValue }
    }

    public var thumbWidth: Int? {
        get { return internalJson["thumb_width"].int }
        set { internalJson["thumb_width"].int = newValue }
    }

    public var title: String {
        get { return internalJson["title"].stringValue }
        set { internalJson["title"].stringValue = newValue }
    }

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InlineQueryResultPhoto: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var caption: String? {
        get { return internalJson["caption"].string }
        set { internalJson["caption"].string = newValue }
    }

    public var description: String? {
        get { return internalJson["description"].string }
        set { internalJson["description"].string = newValue }
    }

    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var inputMessageContent: InputMessageContent? {
        get {
            fatalError("Not implemented")
        }
        set {
            internalJson["input_message_content"] = JSON(newValue?.json ?? JSON.null)
        }
    }

    public var parseModeString: String? {
        get { return internalJson["parse_mode_string"].string }
        set { internalJson["parse_mode_string"].string = newValue }
    }

    public var photoHeight: Int? {
        get { return internalJson["photo_height"].int }
        set { internalJson["photo_height"].int = newValue }
    }

    public var photoUrl: String {
        get { return internalJson["photo_url"].stringValue }
        set { internalJson["photo_url"].stringValue = newValue }
    }

    public var photoWidth: Int? {
        get { return internalJson["photo_width"].int }
        set { internalJson["photo_width"].int = newValue }
    }

    public var replyMarkup: InlineKeyboardMarkup? {
        get {
            let value = internalJson["reply_markup"]
            return value.isNullOrUnknown ? nil : InlineKeyboardMarkup(internalJson: value)
        }
        set {
            internalJson["reply_markup"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var thumbUrl: String {
        get { return internalJson["thumb_url"].stringValue }
        set { internalJson["thumb_url"].stringValue = newValue }
    }

    public var title: String? {
        get { return internalJson["title"].string }
        set { internalJson["title"].string = newValue }
    }

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct SuccessfulPayment: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var currency: String {
        get { return internalJson["currency"].stringValue }
        set { internalJson["currency"].stringValue = newValue }
    }

    public var invoicePayload: String {
        get { return internalJson["invoice_payload"].stringValue }
        set { internalJson["invoice_payload"].stringValue = newValue }
    }

    public var orderInfo: OrderInfo? {
        get {
            let value = internalJson["order_info"]
            return value.isNullOrUnknown ? nil : OrderInfo(internalJson: value)
        }
        set {
            internalJson["order_info"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var providerPaymentChargeId: String {
        get { return internalJson["provider_payment_charge_id"].stringValue }
        set { internalJson["provider_payment_charge_id"].stringValue = newValue }
    }

    public var shippingOptionId: String? {
        get { return internalJson["shipping_option_id"].string }
        set { internalJson["shipping_option_id"].string = newValue }
    }

    public var telegramPaymentChargeId: String {
        get { return internalJson["telegram_payment_charge_id"].stringValue }
        set { internalJson["telegram_payment_charge_id"].stringValue = newValue }
    }

    public var totalAmount: Int {
        get { return internalJson["total_amount"].intValue }
        set { internalJson["total_amount"].intValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct MessageEntity: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var length: Int {
        get { return internalJson["length"].intValue }
        set { internalJson["length"].intValue = newValue }
    }

    public var offset: Int {
        get { return internalJson["offset"].intValue }
        set { internalJson["offset"].intValue = newValue }
    }

    public var typeString: String? {
        get { return internalJson["type_string"].string }
        set { internalJson["type_string"].string = newValue }
    }

    public var url: String? {
        get { return internalJson["url"].string }
        set { internalJson["url"].string = newValue }
    }

    public var user: User? {
        get {
            let value = internalJson["user"]
            return value.isNullOrUnknown ? nil : User(internalJson: value)
        }
        set {
            internalJson["user"] = newValue?.internalJson ?? JSON.null
        }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct ForceReply: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var forceReply: Bool {
        get { return internalJson["force_reply"].boolValue }
        set { internalJson["force_reply"].boolValue = newValue }
    }

    public var selective: Bool? {
        get { return internalJson["selective"].bool }
        set { internalJson["selective"].bool = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct StickerSet: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var containsMasks: Bool {
        get { return internalJson["contains_masks"].boolValue }
        set { internalJson["contains_masks"].boolValue = newValue }
    }

    public var name: String {
        get { return internalJson["name"].stringValue }
        set { internalJson["name"].stringValue = newValue }
    }

    public var stickers: [Sticker] {
        get { return internalJson["stickers"].customArrayValue() }
        set { internalJson["stickers"] = JSON.initFrom(newValue) }
    }

    public var title: String {
        get { return internalJson["title"].stringValue }
        set { internalJson["title"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct Update: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var callbackQuery: CallbackQuery? {
        get {
            let value = internalJson["callback_query"]
            return value.isNullOrUnknown ? nil : CallbackQuery(internalJson: value)
        }
        set {
            internalJson["callback_query"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var channelPost: Message? {
        get {
            let value = internalJson["channel_post"]
            return value.isNullOrUnknown ? nil : Message(internalJson: value)
        }
        set {
            internalJson["channel_post"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var chosenInlineResult: ChosenInlineResult? {
        get {
            let value = internalJson["chosen_inline_result"]
            return value.isNullOrUnknown ? nil : ChosenInlineResult(internalJson: value)
        }
        set {
            internalJson["chosen_inline_result"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var editedChannelPost: Message? {
        get {
            let value = internalJson["edited_channel_post"]
            return value.isNullOrUnknown ? nil : Message(internalJson: value)
        }
        set {
            internalJson["edited_channel_post"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var editedMessage: Message? {
        get {
            let value = internalJson["edited_message"]
            return value.isNullOrUnknown ? nil : Message(internalJson: value)
        }
        set {
            internalJson["edited_message"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var inlineQuery: InlineQuery? {
        get {
            let value = internalJson["inline_query"]
            return value.isNullOrUnknown ? nil : InlineQuery(internalJson: value)
        }
        set {
            internalJson["inline_query"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var message: Message? {
        get {
            let value = internalJson["message"]
            return value.isNullOrUnknown ? nil : Message(internalJson: value)
        }
        set {
            internalJson["message"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var poll: Poll {
        get { return Poll(internalJson: internalJson["poll"]) }
        set { internalJson["poll"] = JSON(newValue.json) }
    }

    public var preCheckoutQuery: PreCheckoutQuery? {
        get {
            let value = internalJson["pre_checkout_query"]
            return value.isNullOrUnknown ? nil : PreCheckoutQuery(internalJson: value)
        }
        set {
            internalJson["pre_checkout_query"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var shippingQuery: ShippingQuery? {
        get {
            let value = internalJson["shipping_query"]
            return value.isNullOrUnknown ? nil : ShippingQuery(internalJson: value)
        }
        set {
            internalJson["shipping_query"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var updateId: Int64 {
        get { return internalJson["update_id"].int64Value }
        set { internalJson["update_id"].int64Value = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct Chat: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var allMembersAreAdministrators: Bool? {
        get { return internalJson["all_members_are_administrators"].bool }
        set { internalJson["all_members_are_administrators"].bool = newValue }
    }

    public var canSetStickerSet: Bool? {
        get { return internalJson["can_set_sticker_set"].bool }
        set { internalJson["can_set_sticker_set"].bool = newValue }
    }

    public var description: String? {
        get { return internalJson["description"].string }
        set { internalJson["description"].string = newValue }
    }

    public var firstName: String? {
        get { return internalJson["first_name"].string }
        set { internalJson["first_name"].string = newValue }
    }

    public var id: Int64 {
        get { return internalJson["id"].int64Value }
        set { internalJson["id"].int64Value = newValue }
    }

    public var inviteLink: String? {
        get { return internalJson["invite_link"].string }
        set { internalJson["invite_link"].string = newValue }
    }

    public var lastName: String? {
        get { return internalJson["last_name"].string }
        set { internalJson["last_name"].string = newValue }
    }

    public var photo: ChatPhoto? {
        get {
            let value = internalJson["photo"]
            return value.isNullOrUnknown ? nil : ChatPhoto(internalJson: value)
        }
        set {
            internalJson["photo"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var pinnedMessage: Message? {
        get {
            let value = internalJson["pinned_message"]
            return value.isNullOrUnknown ? nil : Message(internalJson: value)
        }
        set {
            internalJson["pinned_message"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var stickerSetName: String? {
        get { return internalJson["sticker_set_name"].string }
        set { internalJson["sticker_set_name"].string = newValue }
    }

    public var title: String? {
        get { return internalJson["title"].string }
        set { internalJson["title"].string = newValue }
    }

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    public var username: String? {
        get { return internalJson["username"].string }
        set { internalJson["username"].string = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InlineQueryResultCachedVideo: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var caption: String? {
        get { return internalJson["caption"].string }
        set { internalJson["caption"].string = newValue }
    }

    public var description: String? {
        get { return internalJson["description"].string }
        set { internalJson["description"].string = newValue }
    }

    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var inputMessageContent: InputMessageContent? {
        get {
            fatalError("Not implemented")
        }
        set {
            internalJson["input_message_content"] = JSON(newValue?.json ?? JSON.null)
        }
    }

    public var parseModeString: String? {
        get { return internalJson["parse_mode_string"].string }
        set { internalJson["parse_mode_string"].string = newValue }
    }

    public var replyMarkup: InlineKeyboardMarkup? {
        get {
            let value = internalJson["reply_markup"]
            return value.isNullOrUnknown ? nil : InlineKeyboardMarkup(internalJson: value)
        }
        set {
            internalJson["reply_markup"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var title: String {
        get { return internalJson["title"].stringValue }
        set { internalJson["title"].stringValue = newValue }
    }

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    public var videoFileId: String {
        get { return internalJson["video_file_id"].stringValue }
        set { internalJson["video_file_id"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct ChatPhoto: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var bigFileId: String {
        get { return internalJson["big_file_id"].stringValue }
        set { internalJson["big_file_id"].stringValue = newValue }
    }

    public var smallFileId: String {
        get { return internalJson["small_file_id"].stringValue }
        set { internalJson["small_file_id"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct Location: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var latitude: Float {
        get { return internalJson["latitude"].floatValue }
        set { internalJson["latitude"].floatValue = newValue }
    }

    public var longitude: Float {
        get { return internalJson["longitude"].floatValue }
        set { internalJson["longitude"].floatValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct Game: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var animation: Animation? {
        get {
            let value = internalJson["animation"]
            return value.isNullOrUnknown ? nil : Animation(internalJson: value)
        }
        set {
            internalJson["animation"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var description: String {
        get { return internalJson["description"].stringValue }
        set { internalJson["description"].stringValue = newValue }
    }

    public var photo: [PhotoSize] {
        get { return internalJson["photo"].customArrayValue() }
        set { internalJson["photo"] = JSON.initFrom(newValue) }
    }

    public var text: String? {
        get { return internalJson["text"].string }
        set { internalJson["text"].string = newValue }
    }

    public var textEntities: [MessageEntity] {
        get { return internalJson["text_entities"].customArrayValue() }
        set { internalJson["text_entities"] = newValue.isEmpty ? JSON.null : JSON.initFrom(newValue) }
    }

    public var title: String {
        get { return internalJson["title"].stringValue }
        set { internalJson["title"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct UserProfilePhotos: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var photos: [[PhotoSize]] {
        get { return internalJson["photos"].twoDArrayValue() }
        set {
            var rowsJson = [JSON]()
            rowsJson.reserveCapacity(newValue.count)
            for row in newValue {
                var colsJson = [JSON]()
                colsJson.reserveCapacity(row.count)
                for col in row {
                    let json = col.internalJson
                    colsJson.append(json)
                }
                rowsJson.append(JSON(colsJson))
            }
            internalJson["photos"] = JSON(rowsJson)
        }
    }

    public var totalCount: Int {
        get { return internalJson["total_count"].intValue }
        set { internalJson["total_count"].intValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InlineQueryResultLocation: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var inputMessageContent: InputMessageContent? {
        get {
            fatalError("Not implemented")
        }
        set {
            internalJson["input_message_content"] = JSON(newValue?.json ?? JSON.null)
        }
    }

    public var latitude: Float {
        get { return internalJson["latitude"].floatValue }
        set { internalJson["latitude"].floatValue = newValue }
    }

    public var livePeriod: Int? {
        get { return internalJson["live_period"].int }
        set { internalJson["live_period"].int = newValue }
    }

    public var longitude: Float {
        get { return internalJson["longitude"].floatValue }
        set { internalJson["longitude"].floatValue = newValue }
    }

    public var replyMarkup: InlineKeyboardMarkup? {
        get {
            let value = internalJson["reply_markup"]
            return value.isNullOrUnknown ? nil : InlineKeyboardMarkup(internalJson: value)
        }
        set {
            internalJson["reply_markup"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var thumbHeight: Int? {
        get { return internalJson["thumb_height"].int }
        set { internalJson["thumb_height"].int = newValue }
    }

    public var thumbUrl: String? {
        get { return internalJson["thumb_url"].string }
        set { internalJson["thumb_url"].string = newValue }
    }

    public var thumbWidth: Int? {
        get { return internalJson["thumb_width"].int }
        set { internalJson["thumb_width"].int = newValue }
    }

    public var title: String {
        get { return internalJson["title"].stringValue }
        set { internalJson["title"].stringValue = newValue }
    }

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InlineQueryResultArticle: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var description: String? {
        get { return internalJson["description"].string }
        set { internalJson["description"].string = newValue }
    }

    public var hideUrl: Bool? {
        get { return internalJson["hide_url"].bool }
        set { internalJson["hide_url"].bool = newValue }
    }

    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var inputMessageContent: InputMessageContent {
        get {
            fatalError("Not implemented")
        }
        set {
            internalJson["input_message_content"] = JSON(newValue.json)
        }
    }

    public var replyMarkup: InlineKeyboardMarkup? {
        get {
            let value = internalJson["reply_markup"]
            return value.isNullOrUnknown ? nil : InlineKeyboardMarkup(internalJson: value)
        }
        set {
            internalJson["reply_markup"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var thumbHeight: Int? {
        get { return internalJson["thumb_height"].int }
        set { internalJson["thumb_height"].int = newValue }
    }

    public var thumbUrl: String? {
        get { return internalJson["thumb_url"].string }
        set { internalJson["thumb_url"].string = newValue }
    }

    public var thumbWidth: Int? {
        get { return internalJson["thumb_width"].int }
        set { internalJson["thumb_width"].int = newValue }
    }

    public var title: String {
        get { return internalJson["title"].stringValue }
        set { internalJson["title"].stringValue = newValue }
    }

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    public var url: String? {
        get { return internalJson["url"].string }
        set { internalJson["url"].string = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InputVenueMessageContent: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var address: String {
        get { return internalJson["address"].stringValue }
        set { internalJson["address"].stringValue = newValue }
    }

    public var foursquareId: String? {
        get { return internalJson["foursquare_id"].string }
        set { internalJson["foursquare_id"].string = newValue }
    }

    public var foursquareType: String? {
        get { return internalJson["foursquare_type"].string }
        set { internalJson["foursquare_type"].string = newValue }
    }

    public var latitude: Float {
        get { return internalJson["latitude"].floatValue }
        set { internalJson["latitude"].floatValue = newValue }
    }

    public var longitude: Float {
        get { return internalJson["longitude"].floatValue }
        set { internalJson["longitude"].floatValue = newValue }
    }

    public var title: String {
        get { return internalJson["title"].stringValue }
        set { internalJson["title"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct ResponseParameters: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var migrateToChatId: Int64? {
        get { return internalJson["migrate_to_chat_id"].int64 }
        set { internalJson["migrate_to_chat_id"].int64 = newValue }
    }

    public var retryAfter: Int? {
        get { return internalJson["retry_after"].int }
        set { internalJson["retry_after"].int = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InputLocationMessageContent: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var latitude: Float {
        get { return internalJson["latitude"].floatValue }
        set { internalJson["latitude"].floatValue = newValue }
    }

    public var livePeriod: Int? {
        get { return internalJson["live_period"].int }
        set { internalJson["live_period"].int = newValue }
    }

    public var longitude: Float {
        get { return internalJson["longitude"].floatValue }
        set { internalJson["longitude"].floatValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct LabeledPrice: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var amount: Int {
        get { return internalJson["amount"].intValue }
        set { internalJson["amount"].intValue = newValue }
    }

    public var label: String {
        get { return internalJson["label"].stringValue }
        set { internalJson["label"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct PollOption: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var text: String {
        get { return internalJson["text"].stringValue }
        set { internalJson["text"].stringValue = newValue }
    }

    public var voterCount: Int {
        get { return internalJson["voter_count"].intValue }
        set { internalJson["voter_count"].intValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InputMediaDocument: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var caption: String? {
        get { return internalJson["caption"].string }
        set { internalJson["caption"].string = newValue }
    }

    public var media: String {
        get { return internalJson["media"].stringValue }
        set { internalJson["media"].stringValue = newValue }
    }

    public var parseModeString: String? {
        get { return internalJson["parse_mode_string"].string }
        set { internalJson["parse_mode_string"].string = newValue }
    }

public var thumb: InputFileOrString? = nil

    public var typeString: String {
        get { return internalJson["type_string"].stringValue }
        set { internalJson["type_string"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct InlineKeyboardButton: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var callbackData: String? {
        get { return internalJson["callback_data"].string }
        set { internalJson["callback_data"].string = newValue }
    }

    public var callbackGame: CallbackGame? {
        get {
            let value = internalJson["callback_game"]
            return value.isNullOrUnknown ? nil : CallbackGame(internalJson: value)
        }
        set {
            internalJson["callback_game"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var loginUrl: LoginUrl? {
        get {
            let value = internalJson["login_url"]
            return value.isNullOrUnknown ? nil : LoginUrl(internalJson: value)
        }
        set {
            internalJson["login_url"] = newValue?.internalJson ?? JSON.null
        }
    }

    public var pay: Bool? {
        get { return internalJson["pay"].bool }
        set { internalJson["pay"].bool = newValue }
    }

    public var switchInlineQuery: String? {
        get { return internalJson["switch_inline_query"].string }
        set { internalJson["switch_inline_query"].string = newValue }
    }

    public var switchInlineQueryCurrentChat: String? {
        get { return internalJson["switch_inline_query_current_chat"].string }
        set { internalJson["switch_inline_query_current_chat"].string = newValue }
    }

    public var text: String {
        get { return internalJson["text"].stringValue }
        set { internalJson["text"].stringValue = newValue }
    }

    public var url: String? {
        get { return internalJson["url"].string }
        set { internalJson["url"].string = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


public struct Poll: JsonConvertible, InternalJsonConvertible {
    /// Original JSON for fields not yet added to Swift structures.
    public var json: Any {
        get { return internalJson.object }
        set { internalJson = JSON(newValue) }
    }
    internal var internalJson: JSON
    public var id: String {
        get { return internalJson["id"].stringValue }
        set { internalJson["id"].stringValue = newValue }
    }

    public var isClosed: Bool {
        get { return internalJson["is_closed"].boolValue }
        set { internalJson["is_closed"].boolValue = newValue }
    }

    public var options: [PollOption] {
        get { return internalJson["options"].customArrayValue() }
        set { internalJson["options"] = JSON.initFrom(newValue) }
    }

    public var question: String {
        get { return internalJson["question"].stringValue }
        set { internalJson["question"].stringValue = newValue }
    }

    internal init(internalJson: JSON = [:]) {
        self.internalJson = internalJson
    }
    public init() {
        self.internalJson = JSON()
    }
    public init(json: Any) {
        self.internalJson = JSON(json)
    }
    public init(data: Data) {
        self.internalJson = JSON(data: data)
    }
}


